package com.armin.lc;

public class BulbSwitch {

    /**
     * 319：初始时有 n 个灯泡处于关闭状态。第一轮，你将会打开所有灯泡。接下来的第二轮，你将会每两个灯泡关闭一个。
     *
     * 第三轮，你每三个灯泡就切换一个灯泡的开关（即，打开变关闭，关闭变打开）。第 i 轮，你每 i 个灯泡就切换一个灯泡的开关。直到第 n 轮，你只需要切换最后一个灯泡的开关。
     *
     * 找出并返回 n 轮后有多少个亮着的灯泡。
     *
     */
    public static void main(String[] args) {
        new Thread(() -> {
            /*推理过程复述下：

            第 i 轮会将编号为 i 的倍数的灯泡全部翻转；（i从1开始）

            一个灯泡最后要想亮下来，翻转次数必须为奇数次；
            一个灯泡，只有在其编号的因数轮次会被翻转（如编号为6的灯泡只在第1、2、3、6轮翻转），当轮次超过其编号时，将不会再翻转它；1

            因此，一个灯泡最后亮着的条件，就是其因数的个数为奇数。
            一个数的因数总是成对存在的，只有1个例外，那就是这个数的平方根，如果这个数的平方根也是其因数，那么就会出现1个成单的因子，其因数的数量也就是奇数。

            即：一个灯泡最后亮着的条件，就是其编号为完全平方数。
            因此，题目转化为：求 [1, n] 范围内有多少个完全平方数？答案为： sqrt(n)
            完全平方数个数是：1到当前平方根；
            */
            int n = 18;
            // 比如：18 的平方根取整为 4，则含有 1*1、2*2、3*3、4*4 这四个完全平方数。5*5=25，已经超过 18 了。
            int result = (int) Math.sqrt(n);
            System.out.println("result = " + result);
        }, "t1").start();
    }
}
